/*

頂点リスト及びポリゴンインデックスリストを記述する。


1頂点の座標を長さ3の配列で表したものを頂点の数だけ並べる　
頂点リストはクオーテーションまたはダブルクオーテーションで囲う

（例）const 変数名 = '[[x1,y1,z1],[x2,y2,z2],[x3,y3,z3],...]';

使用可能な関数
・cos(), sin(), tan()
使用可能な定数
・PI
その他
・xのy乗はx**yと記述する


ポリゴンインデックスリストは2次元配列で表す（1つのn角形ポリゴンをn個の頂点番号のリストで表す）
ポリゴンをなす頂点数は3以上で何個でもよい
頂点リストの1番最初の頂点を0番頂点とする

*/


const vts1 = '[[-0.5,-0.5,-0.5],[-0.5,-0.5,0.5],[-0.5,0.5,-0.5],[-0.5,0.5,0.5],[0.,-0.809017,-0.309017],[0.,-0.809017,0.309017],[0.,0.809017,-0.309017],[0.,0.809017,0.309017],[0.,0.561016,0.659743],[0.,0.561016,-0.659743],[0.,-0.561016,0.659743],[0.,-0.561016,-0.659743],[0.5,-0.5,-0.5],[0.5,-0.5,0.5],[0.5,0.5,-0.5],[0.5,0.5,0.5],[-0.707107,0.124,-0.48438],[-0.707107,0.124,0.48438],[-0.707107,-0.124,-0.48438],[-0.707107,-0.124,0.48438],[0.707107,0.124,-0.48438],[0.707107,0.124,0.48438],[0.707107,-0.124,-0.48438],[0.707107,-0.124,0.48438],[-0.809017,-0.309017,0.],[-0.809017,0.309017,0.],[-0.309017,0.,-0.809017],[-0.309017,0.,0.809017],[0.309017,0.,-0.809017],[0.309017,0.,0.809017],[0.809017,-0.309017,0.],[0.809017,0.309017,0.],[-0.36038,-0.783743,0.0766364],[-0.36038,-0.783743,-0.0766364],[-0.36038,0.783743,0.0766364],[-0.36038,0.783743,-0.0766364],[0.36038,-0.783743,0.0766364],[0.36038,-0.783743,-0.0766364],[0.36038,0.783743,0.0766364],[0.36038,0.783743,-0.0766364],[0.0766364,-0.36038,-0.783743],[0.0766364,-0.36038,0.783743],[0.0766364,0.36038,-0.783743],[0.0766364,0.36038,0.783743],[-0.0766364,-0.36038,-0.783743],[-0.0766364,-0.36038,0.783743],[-0.0766364,0.36038,-0.783743],[-0.0766364,0.36038,0.783743],[-0.783743,0.0766364,-0.36038],[-0.783743,0.0766364,0.36038],[-0.783743,-0.0766364,-0.36038],[-0.783743,-0.0766364,0.36038],[0.783743,0.0766364,-0.36038],[0.783743,0.0766364,0.36038],[0.783743,-0.0766364,-0.36038],[0.783743,-0.0766364,0.36038],[0.561016,0.659743,0.],[0.561016,-0.659743,0.],[0.659743,0.,0.561016],[0.659743,0.,-0.561016],[-0.48438,-0.707107,0.124],[-0.48438,-0.707107,-0.124],[-0.48438,0.707107,0.124],[-0.48438,0.707107,-0.124],[0.124,-0.48438,-0.707107],[0.124,-0.48438,0.707107],[0.124,0.48438,-0.707107],[0.124,0.48438,0.707107],[-0.659743,0.,0.561016],[-0.659743,0.,-0.561016],[-0.561016,0.659743,0.],[-0.561016,-0.659743,0.],[-0.124,-0.48438,-0.707107],[-0.124,-0.48438,0.707107],[-0.124,0.48438,-0.707107],[-0.124,0.48438,0.707107],[0.48438,-0.707107,0.124],[0.48438,-0.707107,-0.124],[0.48438,0.707107,0.124],[0.48438,0.707107,-0.124]]';

const index1 = [[[15,34,51,41],[15,41,37,52],[15,52,46,34],[34,46,0,51],[0,46,52,37],[51,0,37,41]],[[29,78,63,68],[29,68,61,76],[29,76,59,78],[78,59,26,63],[26,59,76,61],[63,26,61,68]],[[31,67,73,57],[31,57,72,66],[31,66,70,67],[67,70,24,73],[24,70,66,72],[73,24,72,57]],[[30,56,75,65],[30,65,71,64],[30,64,74,56],[56,74,25,75],[25,74,64,71],[75,25,71,65]],[[14,53,36,40],[14,40,50,35],[14,35,47,53],[53,47,1,36],[1,47,35,50],[36,1,50,40]],[[28,79,58,77],[28,77,60,69],[28,69,62,79],[79,62,27,58],[27,62,69,60],[58,27,60,77]],[[6,20,11,16],[6,16,19,8],[6,8,23,20],[20,23,5,11],[5,23,8,19],[11,5,19,16]],[[2,39,54,44],[2,44,32,49],[2,49,43,39],[39,43,13,54],[13,43,49,32],[54,13,32,44]],[[7,9,18,17],[7,17,10,21],[7,21,22,9],[9,22,4,18],[4,22,21,10],[18,4,10,17]],[[3,38,42,48],[3,48,33,45],[3,45,55,38],[38,55,12,42],[12,55,45,33],[42,12,33,48]]];

const edge1 = [[15,34],[34,51],[41,51],[15,41],[37,41],[37,52],[15,52],[46,52],[34,46],[0,46],[0,51],[0,37],[29,78],[63,78],[63,68],[29,68],[61,68],[61,76],[29,76],[59,76],[59,78],[26,59],[26,63],[26,61],[31,67],[67,73],[57,73],[31,57],[57,72],[66,72],[31,66],[66,70],[67,70],[24,70],[24,73],[24,72],[30,56],[56,75],[65,75],[30,65],[65,71],[64,71],[30,64],[64,74],[56,74],[25,74],[25,75],[25,71],[14,53],[36,53],[36,40],[14,40],[40,50],[35,50],[14,35],[35,47],[47,53],[1,47],[1,36],[1,50],[28,79],[58,79],[58,77],[28,77],[60,77],[60,69],[28,69],[62,69],[62,79],[27,62],[27,58],[27,60],[6,20],[11,20],[11,16],[6,16],[16,19],[8,19],[6,8],[8,23],[20,23],[5,23],[5,11],[5,19],[2,39],[39,54],[44,54],[2,44],[32,44],[32,49],[2,49],[43,49],[39,43],[13,43],[13,54],[13,32],[7,9],[9,18],[17,18],[7,17],[10,17],[10,21],[7,21],[21,22],[9,22],[4,22],[4,18],[4,10],[3,38],[38,42],[42,48],[3,48],[33,48],[33,45],[3,45],[45,55],[38,55],[12,55],[12,42],[12,33]];




//3次元配列インデックスリストの値を全て-1

// for(let i=0; i<index1.length; i++)  for(let j=0; j<index1[i].length; j++)   for(let k=0; k<index1[i][j].length; k++){
//     index1[i][j][k]--;
// }
// console.log(JSON.stringify(index1));



//ポリゴンインデックスリストからエッジ辺リストを生成

// let edge = [];
// for(let i=0; i<index1.length; i++)  for(let j=0; j<index1[i].length; j++)   for(let k=0; k<index1[i][j].length; k++){
//     let a1 = index1[i][j][k];
//     let a2 = index1[i][j][(k+1)%index1[i][j].length];
//     edge.push(JSON.stringify([Math.min(a1,a2), Math.max(a1,a2)]));
// }
// edge = [... new Set(edge)];
// for(let i=0; i<edge.length; i++)    edge[i] = JSON.parse(edge[i]);
// console.log(JSON.stringify(edge));