/*

頂点リスト及びポリゴンインデックスリストを記述する。


1頂点の座標を長さ3の配列で表したものを頂点の数だけ並べる　
頂点リストはクオーテーションまたはダブルクオーテーションで囲う

（例）const 変数名 = '[[x1,y1,z1],[x2,y2,z2],[x3,y3,z3],...]';

使用可能な関数
・cos(), sin(), tan()
使用可能な定数
・PI
その他
・xのy乗はx**yと記述する


ポリゴンインデックスリストは2次元配列で表す（1つのn角形ポリゴンをn個の頂点番号のリストで表す）
ポリゴンをなす頂点数は3以上で何個でもよい
頂点リストの1番最初の頂点を0番頂点とする

*/

const vts1 = '[[-999,-999,-999], [2*r*(cos(t) - sin(t)), 2*r*(cos(t) + sin(t)), 2],[-2*r*(cos(t) + sin(t)), 2*r*(cos(t) - sin(t)), 2],[2*r*(-cos(t) + sin(t)), -2*r*(cos(t) + sin(t)), 2],[2*r*(cos(t) + sin(t)), 2*r*(-cos(t) + sin(t)), 2],[2*r*(-cos(t) + sin(t)), 2*r*(cos(t) + sin(t)), -2],[2*r*(cos(t) + sin(t)), 2*r*(cos(t) - sin(t)), -2],[2*r*(cos(t) - sin(t)), -2*r*(cos(t) + sin(t)), -2],[-2*r*(cos(t) + sin(t)), 2*r*(-cos(t) + sin(t)), -2],[2, 2*r*(cos(t) - sin(t)), 2*r*(cos(t) + sin(t))],[2, -2*r*(cos(t) + sin(t)), 2*r*(cos(t) - sin(t))],[2, 2*r*(-cos(t) + sin(t)), -2*r*(cos(t) + sin(t))],[2, 2*r*(cos(t) + sin(t)), 2*r*(-cos(t) + sin(t))],[2*r*(-cos(t) + sin(t)), 2, 2*r*(cos(t) + sin(t))],[2*r*(cos(t) + sin(t)), 2, 2*r*(cos(t) - sin(t))],[2*r*(cos(t) - sin(t)), 2, -2*r*(cos(t) + sin(t))],[-2*r*(cos(t) + sin(t)), 2, 2*r*(-cos(t) + sin(t))],[-2, 2*r*(-cos(t) + sin(t)), 2*r*(cos(t) + sin(t))],[-2, 2*r*(cos(t) + sin(t)), 2*r*(cos(t) - sin(t))],[-2, 2*r*(cos(t) - sin(t)), -2*r*(cos(t) + sin(t))],[-2, -2*r*(cos(t) + sin(t)), 2*r*(-cos(t) + sin(t))],[2*r*(cos(t) - sin(t)), -2, 2*r*(cos(t) + sin(t))],[-2*r*(cos(t) + sin(t)), -2, 2*r*(cos(t) - sin(t))],[2*r*(-cos(t) + sin(t)), -2, -2*r*(cos(t) + sin(t))],[2*r*(cos(t) + sin(t)), -2, 2*r*(-cos(t) + sin(t))]]';

const index_red = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24]];

const index_blue = [[1,9,14],[4,10,21],[3,17,22],[2,13,18],[6,12,15],[7,11,24],[8,20,23],[5,16,19]];

const index_green = [[9,4,10],[9,4,1],[1,13,2],[1,13,14],[14,12,15],[14,12,9],[21,3,22],[21,3,4],[10,24,11],[10,24,21],[17,2,18],[17,2,3],[22,20,23],[22,20,17],[18,16,19],[18,16,13],[6,11,7],[6,11,12],[15,5,16],[15,5,6],[7,23,8],[7,23,24],[8,19,5],[8,19,20]];

const edge1 = [[1,2],[2,3],[3,4],[1,4],[5,6],[6,7],[7,8],[5,8],[9,10],[10,11],[11,12],[9,12],[13,14],[14,15],[15,16],[13,16],[17,18],[18,19],[19,20],[17,20],[21,22],[22,23],[23,24],[21,24],[1,9],[9,14],[1,14],[4,10],[10,21],[4,21],[3,17],[17,22],[3,22],[2,13],[13,18],[2,18],[6,12],[12,15],[6,15],[7,11],[11,24],[7,24],[8,20],[20,23],[8,23],[5,16],[16,19],[5,19],[4,9],[1,13],[12,14],[3,21],[10,24],[2,17],[20,22],[16,18],[6,11],[5,15],[7,23],[8,19]];




// //ポリゴンインデックスリストからエッジ辺リストを生成
// let index1 = [[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20],[21,22,23,24], [1,9,14],[4,10,21],[3,17,22],[2,13,18],[6,12,15],[7,11,24],[8,20,23],[5,16,19], [9,4,10],[9,4,1],[1,13,2],[1,13,14],[14,12,15],[14,12,9],[21,3,22],[21,3,4],[10,24,11],[10,24,21],[17,2,18],[17,2,3],[22,20,23],[22,20,17],[18,16,19],[18,16,13],[6,11,7],[6,11,12],[15,5,16],[15,5,6],[7,23,8],[7,23,24],[8,19,5],[8,19,20]]];
// let edge = [];

// for(let i=0; i<index1.length; i++)  for(let j=0; j<index1[i].length; j++)   for(let k=0; k<index1[i][j].length; k++){
//     let a1 = index1[i][j][k];
//     let a2 = index1[i][j][(k+1)%index1[i][j].length];
//     edge.push(JSON.stringify([Math.min(a1,a2), Math.max(a1,a2)]));
// }
// edge = [... new Set(edge)];
// for(let i=0; i<edge.length; i++)    edge[i] = JSON.parse(edge[i]);
// console.log(JSON.stringify(edge));